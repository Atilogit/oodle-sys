/* automatically generated by rust-bindgen 0.69.2 */

pub const OODLE2_PUBLIC_HEADER: u32 = 1;
pub const OODLE2BASE_PUBLIC_HEADER: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const OOCOPYRIGHT: &[u8; 46] = b"Copyright (C) 1994-2023, Epic Games Tools LLC\0";
pub const OODLE2_PUBLIC_CORE_DEFINES: u32 = 1;
pub const NULL: u32 = 0;
pub const OODLE_JOB_MAX_DEPENDENCIES: u32 = 4;
pub const OODLE_JOB_NULL_HANDLE: u32 = 0;
pub const OODLE2_VERSION_MAJOR: u32 = 9;
pub const OODLE2_VERSION_MINOR: u32 = 10;
pub const OodleVersion: &[u8; 7] = b"2.9.10\0";
pub const OODLELZ_LOCALDICTIONARYSIZE_MAX: u32 = 1073741824;
pub const OODLELZ_SPACESPEEDTRADEOFFBYTES_DEFAULT: u32 = 256;
pub const OODLELZ_BLOCK_LEN: u32 = 262144;
pub const OODLELZ_BLOCK_MAXIMUM_EXPANSION: u32 = 2;
pub const OODLELZ_BLOCK_MAX_COMPLEN: u32 = 262146;
pub const OODLELZ_QUANTUM_LEN: u32 = 16384;
pub const OODLELZ_QUANTUM_MAXIMUM_EXPANSION: u32 = 5;
pub const OODLELZ_QUANTUM_MAX_COMPLEN: u32 = 16389;
pub const OODLELZ_SEEKCHUNKLEN_MIN: u32 = 262144;
pub const OODLELZ_SEEKCHUNKLEN_MAX: u32 = 536870912;
pub const OODLELZ_FAILED: u32 = 0;
pub const OODLELZ_SEEKPOINTCOUNT_DEFAULT: u32 = 16;
pub const OODLELZ_SCRATCH_MEM_NO_BOUND: i32 = -1;
pub const OODLECORE_PLUGIN_JOB_MAX_DEPENDENCIES: u32 = 4;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type OO_S8 = i8;
pub type OO_U8 = u8;
pub type OO_S16 = i16;
pub type OO_U16 = u16;
pub type OO_S32 = i32;
pub type OO_U32 = u32;
pub type OO_S64 = i64;
pub type OO_U64 = u64;
pub type OO_F32 = f32;
pub type OO_F64 = f64;
pub type OO_SINTa = isize;
pub type OO_UINTa = usize;
pub type OO_BOOL = i32;
pub type t_OodleFPVoidVoid = ::std::option::Option<unsafe extern "C" fn()>;
pub type t_OodleFPVoidVoidStar =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub const OodleLZ_Verbosity_OodleLZ_Verbosity_None: OodleLZ_Verbosity = 0;
pub const OodleLZ_Verbosity_OodleLZ_Verbosity_Minimal: OodleLZ_Verbosity = 1;
pub const OodleLZ_Verbosity_OodleLZ_Verbosity_Some: OodleLZ_Verbosity = 2;
pub const OodleLZ_Verbosity_OodleLZ_Verbosity_Lots: OodleLZ_Verbosity = 3;
pub const OodleLZ_Verbosity_OodleLZ_Verbosity_Force32: OodleLZ_Verbosity = 1073741824;
pub type OodleLZ_Verbosity = ::std::os::raw::c_uint;
pub type _dummy_array61 = [::std::os::raw::c_char; 1usize];
pub const OodleLZ_Compressor_OodleLZ_Compressor_Invalid: OodleLZ_Compressor = -1;
pub const OodleLZ_Compressor_OodleLZ_Compressor_None: OodleLZ_Compressor = 3;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Kraken: OodleLZ_Compressor = 8;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Leviathan: OodleLZ_Compressor = 13;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Mermaid: OodleLZ_Compressor = 9;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Selkie: OodleLZ_Compressor = 11;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Hydra: OodleLZ_Compressor = 12;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Count: OodleLZ_Compressor = 14;
pub const OodleLZ_Compressor_OodleLZ_Compressor_Force32: OodleLZ_Compressor = 1073741824;
pub type OodleLZ_Compressor = ::std::os::raw::c_int;
pub type _dummy_array109 = [::std::os::raw::c_char; 1usize];
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_No: OodleLZ_PackedRawOverlap = 0;
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_Yes: OodleLZ_PackedRawOverlap = 1;
pub const OodleLZ_PackedRawOverlap_OodleLZ_PackedRawOverlap_Force32: OodleLZ_PackedRawOverlap =
    1073741824;
pub type OodleLZ_PackedRawOverlap = ::std::os::raw::c_uint;
pub const OodleLZ_CheckCRC_OodleLZ_CheckCRC_No: OodleLZ_CheckCRC = 0;
pub const OodleLZ_CheckCRC_OodleLZ_CheckCRC_Yes: OodleLZ_CheckCRC = 1;
pub const OodleLZ_CheckCRC_OodleLZ_CheckCRC_Force32: OodleLZ_CheckCRC = 1073741824;
pub type OodleLZ_CheckCRC = ::std::os::raw::c_uint;
pub const OodleLZ_Profile_OodleLZ_Profile_Main: OodleLZ_Profile = 0;
pub const OodleLZ_Profile_OodleLZ_Profile_Reduced: OodleLZ_Profile = 1;
pub const OodleLZ_Profile_OodleLZ_Profile_Force32: OodleLZ_Profile = 1073741824;
pub type OodleLZ_Profile = ::std::os::raw::c_uint;
pub type _dummy_array149 = [::std::os::raw::c_char; 1usize];
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Continue:
    OodleDecompressCallbackRet = 0;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Cancel: OodleDecompressCallbackRet =
    1;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Invalid:
    OodleDecompressCallbackRet = 2;
pub const OodleDecompressCallbackRet_OodleDecompressCallbackRet_Force32:
    OodleDecompressCallbackRet = 1073741824;
pub type OodleDecompressCallbackRet = ::std::os::raw::c_uint;
pub type OodleDecompressCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        rawBuf: *const OO_U8,
        rawLen: OO_SINTa,
        compBuf: *const OO_U8,
        compBufferSize: OO_SINTa,
        rawDone: OO_SINTa,
        compUsed: OO_SINTa,
    ) -> OodleDecompressCallbackRet,
>;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_None: OodleLZ_CompressionLevel = 0;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_SuperFast: OodleLZ_CompressionLevel = 1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_VeryFast: OodleLZ_CompressionLevel = 2;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Fast: OodleLZ_CompressionLevel = 3;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Normal: OodleLZ_CompressionLevel = 4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal1: OodleLZ_CompressionLevel = 5;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal2: OodleLZ_CompressionLevel = 6;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal3: OodleLZ_CompressionLevel = 7;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal4: OodleLZ_CompressionLevel = 8;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal5: OodleLZ_CompressionLevel = 9;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast1: OodleLZ_CompressionLevel =
    -1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast2: OodleLZ_CompressionLevel =
    -2;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast3: OodleLZ_CompressionLevel =
    -3;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast4: OodleLZ_CompressionLevel =
    -4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_HyperFast: OodleLZ_CompressionLevel =
    -1;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Optimal: OodleLZ_CompressionLevel = 6;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Max: OodleLZ_CompressionLevel = 9;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Min: OodleLZ_CompressionLevel = -4;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Force32: OodleLZ_CompressionLevel =
    1073741824;
pub const OodleLZ_CompressionLevel_OodleLZ_CompressionLevel_Invalid: OodleLZ_CompressionLevel =
    1073741824;
pub type OodleLZ_CompressionLevel = ::std::os::raw::c_int;
pub type _dummy_array232 = [::std::os::raw::c_char; 1usize];
pub const OodleLZ_Jobify_OodleLZ_Jobify_Default: OodleLZ_Jobify = 0;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Disable: OodleLZ_Jobify = 1;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Normal: OodleLZ_Jobify = 2;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Aggressive: OodleLZ_Jobify = 3;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Count: OodleLZ_Jobify = 4;
pub const OodleLZ_Jobify_OodleLZ_Jobify_Force32: OodleLZ_Jobify = 1073741824;
pub type OodleLZ_Jobify = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_CompressOptions {
    pub unused_was_verbosity: OO_U32,
    pub minMatchLen: OO_S32,
    pub seekChunkReset: OO_BOOL,
    pub seekChunkLen: OO_S32,
    pub profile: OodleLZ_Profile,
    pub dictionarySize: OO_S32,
    pub spaceSpeedTradeoffBytes: OO_S32,
    pub unused_was_maxHuffmansPerChunk: OO_S32,
    pub sendQuantumCRCs: OO_BOOL,
    pub maxLocalDictionarySize: OO_S32,
    pub makeLongRangeMatcher: OO_BOOL,
    pub matchTableSizeLog2: OO_S32,
    pub jobify: OodleLZ_Jobify,
    pub jobifyUserPtr: *mut ::std::os::raw::c_void,
    pub farMatchMinLen: OO_S32,
    pub farMatchOffsetLog2: OO_S32,
    pub reserved: [OO_U32; 4usize],
}
#[test]
fn bindgen_test_layout_OodleLZ_CompressOptions() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_CompressOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_CompressOptions>(),
        84usize,
        concat!("Size of: ", stringify!(OodleLZ_CompressOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_CompressOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_CompressOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused_was_verbosity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(unused_was_verbosity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minMatchLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(minMatchLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkReset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(seekChunkReset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkLen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(seekChunkLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictionarySize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(dictionarySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceSpeedTradeoffBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(spaceSpeedTradeoffBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unused_was_maxHuffmansPerChunk) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(unused_was_maxHuffmansPerChunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendQuantumCRCs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(sendQuantumCRCs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLocalDictionarySize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(maxLocalDictionarySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).makeLongRangeMatcher) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(makeLongRangeMatcher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matchTableSizeLog2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(matchTableSizeLog2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobify) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(jobify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobifyUserPtr) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(jobifyUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farMatchMinLen) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(farMatchMinLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).farMatchOffsetLog2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(farMatchOffsetLog2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_CompressOptions),
            "::",
            stringify!(reserved)
        )
    );
}
pub const OodleLZ_Decode_ThreadPhase_OodleLZ_Decode_ThreadPhase1: OodleLZ_Decode_ThreadPhase = 1;
pub const OodleLZ_Decode_ThreadPhase_OodleLZ_Decode_ThreadPhase2: OodleLZ_Decode_ThreadPhase = 2;
pub const OodleLZ_Decode_ThreadPhase_OodleLZ_Decode_ThreadPhaseAll: OodleLZ_Decode_ThreadPhase = 3;
pub const OodleLZ_Decode_ThreadPhase_OodleLZ_Decode_Unthreaded: OodleLZ_Decode_ThreadPhase = 3;
pub type OodleLZ_Decode_ThreadPhase = ::std::os::raw::c_uint;
pub const OodleLZ_FuzzSafe_OodleLZ_FuzzSafe_No: OodleLZ_FuzzSafe = 0;
pub const OodleLZ_FuzzSafe_OodleLZ_FuzzSafe_Yes: OodleLZ_FuzzSafe = 1;
pub type OodleLZ_FuzzSafe = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_DecodeSome_Out {
    pub decodedCount: OO_S32,
    pub compBufUsed: OO_S32,
    pub curQuantumRawLen: OO_S32,
    pub curQuantumCompLen: OO_S32,
}
#[test]
fn bindgen_test_layout_OodleLZ_DecodeSome_Out() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_DecodeSome_Out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_DecodeSome_Out>(),
        16usize,
        concat!("Size of: ", stringify!(OodleLZ_DecodeSome_Out))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_DecodeSome_Out>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_DecodeSome_Out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(decodedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compBufUsed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(compBufUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curQuantumRawLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(curQuantumRawLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curQuantumCompLen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_DecodeSome_Out),
            "::",
            stringify!(curQuantumCompLen)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleLZ_SeekTable {
    pub compressor: OodleLZ_Compressor,
    pub seekChunksIndependent: OO_BOOL,
    pub totalRawLen: OO_S64,
    pub totalCompLen: OO_S64,
    pub numSeekChunks: OO_S32,
    pub seekChunkLen: OO_S32,
    pub seekChunkCompLens: *mut OO_U32,
    pub rawCRCs: *mut OO_U32,
}
#[test]
fn bindgen_test_layout_OodleLZ_SeekTable() {
    const UNINIT: ::std::mem::MaybeUninit<OodleLZ_SeekTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleLZ_SeekTable>(),
        48usize,
        concat!("Size of: ", stringify!(OodleLZ_SeekTable))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleLZ_SeekTable>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleLZ_SeekTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(compressor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunksIndependent) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunksIndependent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalRawLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(totalRawLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalCompLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(totalCompLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSeekChunks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(numSeekChunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkLen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunkLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekChunkCompLens) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(seekChunkCompLens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawCRCs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleLZ_SeekTable),
            "::",
            stringify!(rawCRCs)
        )
    );
}
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_None: OodleLZSeekTable_Flags = 0;
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_MakeRawCRCs: OodleLZSeekTable_Flags = 1;
pub const OodleLZSeekTable_Flags_OodleLZSeekTable_Flags_Force32: OodleLZSeekTable_Flags =
    1073741824;
pub type OodleLZSeekTable_Flags = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OodleConfigValues {
    pub m_OodleLZ_LW_LRM_step: OO_S32,
    pub m_OodleLZ_LW_LRM_hashLength: OO_S32,
    pub m_OodleLZ_LW_LRM_jumpbits: OO_S32,
    pub m_OodleLZ_Decoder_Max_Stack_Size: OO_S32,
    pub m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused: OO_S32,
    pub m_OodleLZ_BackwardsCompatible_MajorVersion: OO_S32,
    pub m_oodle_header_version: OO_U32,
}
#[test]
fn bindgen_test_layout_OodleConfigValues() {
    const UNINIT: ::std::mem::MaybeUninit<OodleConfigValues> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OodleConfigValues>(),
        28usize,
        concat!("Size of: ", stringify!(OodleConfigValues))
    );
    assert_eq!(
        ::std::mem::align_of::<OodleConfigValues>(),
        1usize,
        concat!("Alignment of ", stringify!(OodleConfigValues))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_step) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_hashLength) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_hashLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_OodleLZ_LW_LRM_jumpbits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_LW_LRM_jumpbits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_Decoder_Max_Stack_Size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_Decoder_Max_Stack_Size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_Small_Buffer_LZ_Fallback_Size_Unused)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).m_OodleLZ_BackwardsCompatible_MajorVersion) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_OodleLZ_BackwardsCompatible_MajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_oodle_header_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OodleConfigValues),
            "::",
            stringify!(m_oodle_header_version)
        )
    );
}
extern "C" {
    pub fn Oodle_GetConfigValues(ptr: *mut OodleConfigValues);
}
extern "C" {
    pub fn Oodle_SetConfigValues(ptr: *const OodleConfigValues);
}
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Enabled: Oodle_UsageWarnings = 0;
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Disabled: Oodle_UsageWarnings = 1;
pub const Oodle_UsageWarnings_Oodle_UsageWarnings_Force32: Oodle_UsageWarnings = 1073741824;
pub type Oodle_UsageWarnings = ::std::os::raw::c_uint;
extern "C" {
    pub fn Oodle_SetUsageWarnings(state: Oodle_UsageWarnings);
}
pub type t_fp_OodleCore_Plugin_MallocAligned = ::std::option::Option<
    unsafe extern "C" fn(bytes: OO_SINTa, alignment: OO_S32) -> *mut ::std::os::raw::c_void,
>;
pub type t_fp_OodleCore_Plugin_Free =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn OodleCore_Plugins_SetAllocators(
        fp_OodleMallocAligned: t_fp_OodleCore_Plugin_MallocAligned,
        fp_OodleFree: t_fp_OodleCore_Plugin_Free,
    );
}
pub type t_fp_OodleCore_Plugin_RunJob = ::std::option::Option<
    unsafe extern "C" fn(
        fp_job: t_OodleFPVoidVoidStar,
        job_data: *mut ::std::os::raw::c_void,
        dependencies: *mut OO_U64,
        num_dependencies: ::std::os::raw::c_int,
        user_ptr: *mut ::std::os::raw::c_void,
    ) -> OO_U64,
>;
pub type t_fp_OodleCore_Plugin_WaitJob = ::std::option::Option<
    unsafe extern "C" fn(job_handle: OO_U64, user_ptr: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn OodleCore_Plugins_SetJobSystem(
        fp_RunJob: t_fp_OodleCore_Plugin_RunJob,
        fp_WaitJob: t_fp_OodleCore_Plugin_WaitJob,
    );
}
extern "C" {
    pub fn OodleCore_Plugins_SetJobSystemAndCount(
        fp_RunJob: t_fp_OodleCore_Plugin_RunJob,
        fp_WaitJob: t_fp_OodleCore_Plugin_WaitJob,
        target_parallelism: ::std::os::raw::c_int,
    );
}
pub type t_fp_OodleCore_Plugin_Printf = ::std::option::Option<
    unsafe extern "C" fn(
        verboseLevel: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub fn OodleCore_Plugins_SetPrintf(
        fp_rrRawPrintf: t_fp_OodleCore_Plugin_Printf,
    ) -> t_fp_OodleCore_Plugin_Printf;
}
pub type t_fp_OodleCore_Plugin_DisplayAssertion = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> OO_BOOL,
>;
extern "C" {
    pub fn OodleCore_Plugins_SetAssertion(
        fp_rrDisplayAssertion: t_fp_OodleCore_Plugin_DisplayAssertion,
    ) -> t_fp_OodleCore_Plugin_DisplayAssertion;
}
extern "C" {
    pub fn OodleCore_Plugin_MallocAligned_Default(
        size: OO_SINTa,
        alignment: OO_S32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OodleCore_Plugin_Free_Default(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn OodleCore_Plugin_Printf_Default(
        verboseLevel: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn OodleCore_Plugin_Printf_Verbose(
        verboseLevel: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn OodleCore_Plugin_DisplayAssertion_Default(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn OodleCore_Plugin_RunJob_Default(
        fp_job: t_OodleFPVoidVoidStar,
        job_data: *mut ::std::os::raw::c_void,
        dependencies: *mut OO_U64,
        num_dependencies: ::std::os::raw::c_int,
        user_ptr: *mut ::std::os::raw::c_void,
    ) -> OO_U64;
}
extern "C" {
    pub fn OodleCore_Plugin_WaitJob_Default(
        job_handle: OO_U64,
        user_ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn OodleLZ_Compress(
        compressor: OodleLZ_Compressor,
        rawBuf: *const ::std::os::raw::c_void,
        rawLen: OO_SINTa,
        compBuf: *mut ::std::os::raw::c_void,
        level: OodleLZ_CompressionLevel,
        pOptions: *const OodleLZ_CompressOptions,
        dictionaryBase: *const ::std::os::raw::c_void,
        lrm: *const ::std::os::raw::c_void,
        scratchMem: *mut ::std::os::raw::c_void,
        scratchSize: OO_SINTa,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_Decompress(
        compBuf: *const ::std::os::raw::c_void,
        compBufSize: OO_SINTa,
        rawBuf: *mut ::std::os::raw::c_void,
        rawLen: OO_SINTa,
        fuzzSafe: OodleLZ_FuzzSafe,
        checkCRC: OodleLZ_CheckCRC,
        verbosity: OodleLZ_Verbosity,
        decBufBase: *mut ::std::os::raw::c_void,
        decBufSize: OO_SINTa,
        fpCallback: OodleDecompressCallback,
        callbackUserData: *mut ::std::os::raw::c_void,
        decoderMemory: *mut ::std::os::raw::c_void,
        decoderMemorySize: OO_SINTa,
        threadPhase: OodleLZ_Decode_ThreadPhase,
    ) -> OO_SINTa;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OodleLZDecoder {
    _unused: [u8; 0],
}
pub type OodleLZDecoder = _OodleLZDecoder;
extern "C" {
    pub fn OodleLZDecoder_Create(
        compressor: OodleLZ_Compressor,
        rawLen: OO_S64,
        memory: *mut ::std::os::raw::c_void,
        memorySize: OO_SINTa,
    ) -> *mut OodleLZDecoder;
}
extern "C" {
    pub fn OodleLZDecoder_MemorySizeNeeded(
        compressor: OodleLZ_Compressor,
        rawLen: OO_SINTa,
    ) -> OO_S32;
}
extern "C" {
    pub fn OodleLZ_ThreadPhased_BlockDecoderMemorySizeNeeded() -> OO_S32;
}
extern "C" {
    pub fn OodleLZDecoder_Destroy(decoder: *mut OodleLZDecoder);
}
extern "C" {
    pub fn OodleLZDecoder_Reset(
        decoder: *mut OodleLZDecoder,
        decPos: OO_SINTa,
        decLen: OO_SINTa,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn OodleLZDecoder_DecodeSome(
        decoder: *mut OodleLZDecoder,
        out: *mut OodleLZ_DecodeSome_Out,
        decBuf: *mut ::std::os::raw::c_void,
        decBufPos: OO_SINTa,
        decBufferSize: OO_SINTa,
        decBufAvail: OO_SINTa,
        compPtr: *const ::std::os::raw::c_void,
        compAvail: OO_SINTa,
        fuzzSafe: OodleLZ_FuzzSafe,
        checkCRC: OodleLZ_CheckCRC,
        verbosity: OodleLZ_Verbosity,
        threadPhase: OodleLZ_Decode_ThreadPhase,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn OodleLZDecoder_MakeValidCircularWindowSize(
        compressor: OodleLZ_Compressor,
        minWindowSize: OO_S32,
    ) -> OO_S32;
}
extern "C" {
    pub fn OodleLZ_MakeSeekChunkLen(rawLen: OO_S64, desiredSeekPointCount: OO_S32) -> OO_S32;
}
extern "C" {
    pub fn OodleLZ_GetNumSeekChunks(rawLen: OO_S64, seekChunkLen: OO_S32) -> OO_S32;
}
extern "C" {
    pub fn OodleLZ_GetSeekTableMemorySizeNeeded(
        numSeekChunks: OO_S32,
        flags: OodleLZSeekTable_Flags,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_FillSeekTable(
        pTable: *mut OodleLZ_SeekTable,
        flags: OodleLZSeekTable_Flags,
        seekChunkLen: OO_S32,
        rawBuf: *const ::std::os::raw::c_void,
        rawLen: OO_SINTa,
        compBuf: *const ::std::os::raw::c_void,
        compLen: OO_SINTa,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn OodleLZ_CreateSeekTable(
        flags: OodleLZSeekTable_Flags,
        seekChunkLen: OO_S32,
        rawBuf: *const ::std::os::raw::c_void,
        rawLen: OO_SINTa,
        compBuf: *const ::std::os::raw::c_void,
        compLen: OO_SINTa,
    ) -> *mut OodleLZ_SeekTable;
}
extern "C" {
    pub fn OodleLZ_FreeSeekTable(pTable: *mut OodleLZ_SeekTable);
}
extern "C" {
    pub fn OodleLZ_CheckSeekTableCRCs(
        rawBuf: *const ::std::os::raw::c_void,
        rawLen: OO_SINTa,
        seekTable: *const OodleLZ_SeekTable,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn OodleLZ_FindSeekEntry(rawPos: OO_S64, seekTable: *const OodleLZ_SeekTable) -> OO_S32;
}
extern "C" {
    pub fn OodleLZ_GetSeekEntryPackedPos(
        seekI: OO_S32,
        seekTable: *const OodleLZ_SeekTable,
    ) -> OO_S64;
}
extern "C" {
    pub fn OodleLZ_CompressionLevel_GetName(
        compressSelect: OodleLZ_CompressionLevel,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OodleLZ_Compressor_GetName(
        compressor: OodleLZ_Compressor,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OodleLZ_Jobify_GetName(jobify: OodleLZ_Jobify) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OodleLZ_CompressOptions_GetDefault(
        compressor: OodleLZ_Compressor,
        lzLevel: OodleLZ_CompressionLevel,
    ) -> *const OodleLZ_CompressOptions;
}
extern "C" {
    pub fn OodleLZ_CompressOptions_Validate(pOptions: *mut OodleLZ_CompressOptions);
}
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_WorstCase:
    OodleLZ_CompressScratchMemBoundType = 0;
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_Typical:
    OodleLZ_CompressScratchMemBoundType = 1;
pub const OodleLZ_CompressScratchMemBoundType_OodleLZ_CompressScratchMemBoundType_Force32:
    OodleLZ_CompressScratchMemBoundType = 1073741824;
pub type OodleLZ_CompressScratchMemBoundType = ::std::os::raw::c_uint;
extern "C" {
    pub fn OodleLZ_GetCompressScratchMemBound(
        compressor: OodleLZ_Compressor,
        level: OodleLZ_CompressionLevel,
        rawLen: OO_SINTa,
        pOptions: *const OodleLZ_CompressOptions,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetCompressScratchMemBoundEx(
        compressor: OodleLZ_Compressor,
        level: OodleLZ_CompressionLevel,
        boundType: OodleLZ_CompressScratchMemBoundType,
        rawLen: OO_SINTa,
        pOptions: *const OodleLZ_CompressOptions,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetCompressedBufferSizeNeeded(
        compressor: OodleLZ_Compressor,
        rawSize: OO_SINTa,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetDecodeBufferSize(
        compressor: OodleLZ_Compressor,
        rawSize: OO_SINTa,
        corruptionPossible: OO_BOOL,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetInPlaceDecodeBufferSize(
        compressor: OodleLZ_Compressor,
        compLen: OO_SINTa,
        rawLen: OO_SINTa,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetCompressedStepForRawStep(
        compPtr: *const ::std::os::raw::c_void,
        compAvail: OO_SINTa,
        startRawPos: OO_SINTa,
        rawSeekBytes: OO_SINTa,
        pEndRawPos: *mut OO_SINTa,
        pIndependent: *mut OO_BOOL,
    ) -> OO_SINTa;
}
extern "C" {
    pub fn OodleLZ_GetAllChunksCompressor(
        compBuf: *const ::std::os::raw::c_void,
        compBufSize: OO_SINTa,
        rawLen: OO_SINTa,
    ) -> OodleLZ_Compressor;
}
extern "C" {
    pub fn OodleLZ_GetFirstChunkCompressor(
        compChunkPtr: *const ::std::os::raw::c_void,
        compBufAvail: OO_SINTa,
        pIndependent: *mut OO_BOOL,
    ) -> OodleLZ_Compressor;
}
extern "C" {
    pub fn OodleLZ_GetChunkCompressor(
        compChunkPtr: *const ::std::os::raw::c_void,
        compBufAvail: OO_SINTa,
        pIndependent: *mut OO_BOOL,
    ) -> OodleLZ_Compressor;
}
extern "C" {
    pub fn Oodle_CheckVersion(
        oodle_header_version: OO_U32,
        pOodleLibVersion: *mut OO_U32,
    ) -> OO_BOOL;
}
extern "C" {
    pub fn Oodle_LogHeader();
}
